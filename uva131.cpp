#include <fstream>
#include <iostream>
#include <string>
#include <algorithm>
#include <map>
#include "string.h"
using namespace std;
#ifdef DEBUG
ifstream fin("uva131.in");
ofstream fout("uva131.out");
#endif 
string hand[5],deck[5];
string value[9]={"highest-card","one-pair","two-pairs","three-of-a-kind","straight","flush","full-house","four-of-a-kind","straight-flush"};
string current[6];
int result;
map<char,int> v;

int P[326][5]={{0,0,0,0,0},
{1,0,0,0,0},
{0,1,0,0,0},
{0,0,1,0,0},
{0,0,0,1,0},
{0,0,0,0,1},
{1,2,0,0,0},
{1,0,2,0,0},
{1,0,0,2,0},
{1,0,0,0,2},
{2,1,0,0,0},
{0,1,2,0,0},
{0,1,0,2,0},
{0,1,0,0,2},
{2,0,1,0,0},
{0,2,1,0,0},
{0,0,1,2,0},
{0,0,1,0,2},
{2,0,0,1,0},
{0,2,0,1,0},
{0,0,2,1,0},
{0,0,0,1,2},
{2,0,0,0,1},
{0,2,0,0,1},
{0,0,2,0,1},
{0,0,0,2,1},
{1,2,3,0,0},
{1,2,0,3,0},
{1,2,0,0,3},
{1,3,2,0,0},
{1,0,2,3,0},
{1,0,2,0,3},
{1,3,0,2,0},
{1,0,3,2,0},
{1,0,0,2,3},
{1,3,0,0,2},
{1,0,3,0,2},
{1,0,0,3,2},
{2,1,3,0,0},
{2,1,0,3,0},
{2,1,0,0,3},
{3,1,2,0,0},
{0,1,2,3,0},
{0,1,2,0,3},
{3,1,0,2,0},
{0,1,3,2,0},
{0,1,0,2,3},
{3,1,0,0,2},
{0,1,3,0,2},
{0,1,0,3,2},
{2,3,1,0,0},
{2,0,1,3,0},
{2,0,1,0,3},
{3,2,1,0,0},
{0,2,1,3,0},
{0,2,1,0,3},
{3,0,1,2,0},
{0,3,1,2,0},
{0,0,1,2,3},
{3,0,1,0,2},
{0,3,1,0,2},
{0,0,1,3,2},
{2,3,0,1,0},
{2,0,3,1,0},
{2,0,0,1,3},
{3,2,0,1,0},
{0,2,3,1,0},
{0,2,0,1,3},
{3,0,2,1,0},
{0,3,2,1,0},
{0,0,2,1,3},
{3,0,0,1,2},
{0,3,0,1,2},
{0,0,3,1,2},
{2,3,0,0,1},
{2,0,3,0,1},
{2,0,0,3,1},
{3,2,0,0,1},
{0,2,3,0,1},
{0,2,0,3,1},
{3,0,2,0,1},
{0,3,2,0,1},
{0,0,2,3,1},
{3,0,0,2,1},
{0,3,0,2,1},
{0,0,3,2,1},
{1,2,3,4,0},
{1,2,3,0,4},
{1,2,4,3,0},
{1,2,0,3,4},
{1,2,4,0,3},
{1,2,0,4,3},
{1,3,2,4,0},
{1,3,2,0,4},
{1,4,2,3,0},
{1,0,2,3,4},
{1,4,2,0,3},
{1,0,2,4,3},
{1,3,4,2,0},
{1,3,0,2,4},
{1,4,3,2,0},
{1,0,3,2,4},
{1,4,0,2,3},
{1,0,4,2,3},
{1,3,4,0,2},
{1,3,0,4,2},
{1,4,3,0,2},
{1,0,3,4,2},
{1,4,0,3,2},
{1,0,4,3,2},
{2,1,3,4,0},
{2,1,3,0,4},
{2,1,4,3,0},
{2,1,0,3,4},
{2,1,4,0,3},
{2,1,0,4,3},
{3,1,2,4,0},
{3,1,2,0,4},
{4,1,2,3,0},
{0,1,2,3,4},
{4,1,2,0,3},
{0,1,2,4,3},
{3,1,4,2,0},
{3,1,0,2,4},
{4,1,3,2,0},
{0,1,3,2,4},
{4,1,0,2,3},
{0,1,4,2,3},
{3,1,4,0,2},
{3,1,0,4,2},
{4,1,3,0,2},
{0,1,3,4,2},
{4,1,0,3,2},
{0,1,4,3,2},
{2,3,1,4,0},
{2,3,1,0,4},
{2,4,1,3,0},
{2,0,1,3,4},
{2,4,1,0,3},
{2,0,1,4,3},
{3,2,1,4,0},
{3,2,1,0,4},
{4,2,1,3,0},
{0,2,1,3,4},
{4,2,1,0,3},
{0,2,1,4,3},
{3,4,1,2,0},
{3,0,1,2,4},
{4,3,1,2,0},
{0,3,1,2,4},
{4,0,1,2,3},
{0,4,1,2,3},
{3,4,1,0,2},
{3,0,1,4,2},
{4,3,1,0,2},
{0,3,1,4,2},
{4,0,1,3,2},
{0,4,1,3,2},
{2,3,4,1,0},
{2,3,0,1,4},
{2,4,3,1,0},
{2,0,3,1,4},
{2,4,0,1,3},
{2,0,4,1,3},
{3,2,4,1,0},
{3,2,0,1,4},
{4,2,3,1,0},
{0,2,3,1,4},
{4,2,0,1,3},
{0,2,4,1,3},
{3,4,2,1,0},
{3,0,2,1,4},
{4,3,2,1,0},
{0,3,2,1,4},
{4,0,2,1,3},
{0,4,2,1,3},
{3,4,0,1,2},
{3,0,4,1,2},
{4,3,0,1,2},
{0,3,4,1,2},
{4,0,3,1,2},
{0,4,3,1,2},
{2,3,4,0,1},
{2,3,0,4,1},
{2,4,3,0,1},
{2,0,3,4,1},
{2,4,0,3,1},
{2,0,4,3,1},
{3,2,4,0,1},
{3,2,0,4,1},
{4,2,3,0,1},
{0,2,3,4,1},
{4,2,0,3,1},
{0,2,4,3,1},
{3,4,2,0,1},
{3,0,2,4,1},
{4,3,2,0,1},
{0,3,2,4,1},
{4,0,2,3,1},
{0,4,2,3,1},
{3,4,0,2,1},
{3,0,4,2,1},
{4,3,0,2,1},
{0,3,4,2,1},
{4,0,3,2,1},
{0,4,3,2,1},
{1,2,3,4,5},
{1,2,3,5,4},
{1,2,4,3,5},
{1,2,5,3,4},
{1,2,4,5,3},
{1,2,5,4,3},
{1,3,2,4,5},
{1,3,2,5,4},
{1,4,2,3,5},
{1,5,2,3,4},
{1,4,2,5,3},
{1,5,2,4,3},
{1,3,4,2,5},
{1,3,5,2,4},
{1,4,3,2,5},
{1,5,3,2,4},
{1,4,5,2,3},
{1,5,4,2,3},
{1,3,4,5,2},
{1,3,5,4,2},
{1,4,3,5,2},
{1,5,3,4,2},
{1,4,5,3,2},
{1,5,4,3,2},
{2,1,3,4,5},
{2,1,3,5,4},
{2,1,4,3,5},
{2,1,5,3,4},
{2,1,4,5,3},
{2,1,5,4,3},
{3,1,2,4,5},
{3,1,2,5,4},
{4,1,2,3,5},
{5,1,2,3,4},
{4,1,2,5,3},
{5,1,2,4,3},
{3,1,4,2,5},
{3,1,5,2,4},
{4,1,3,2,5},
{5,1,3,2,4},
{4,1,5,2,3},
{5,1,4,2,3},
{3,1,4,5,2},
{3,1,5,4,2},
{4,1,3,5,2},
{5,1,3,4,2},
{4,1,5,3,2},
{5,1,4,3,2},
{2,3,1,4,5},
{2,3,1,5,4},
{2,4,1,3,5},
{2,5,1,3,4},
{2,4,1,5,3},
{2,5,1,4,3},
{3,2,1,4,5},
{3,2,1,5,4},
{4,2,1,3,5},
{5,2,1,3,4},
{4,2,1,5,3},
{5,2,1,4,3},
{3,4,1,2,5},
{3,5,1,2,4},
{4,3,1,2,5},
{5,3,1,2,4},
{4,5,1,2,3},
{5,4,1,2,3},
{3,4,1,5,2},
{3,5,1,4,2},
{4,3,1,5,2},
{5,3,1,4,2},
{4,5,1,3,2},
{5,4,1,3,2},
{2,3,4,1,5},
{2,3,5,1,4},
{2,4,3,1,5},
{2,5,3,1,4},
{2,4,5,1,3},
{2,5,4,1,3},
{3,2,4,1,5},
{3,2,5,1,4},
{4,2,3,1,5},
{5,2,3,1,4},
{4,2,5,1,3},
{5,2,4,1,3},
{3,4,2,1,5},
{3,5,2,1,4},
{4,3,2,1,5},
{5,3,2,1,4},
{4,5,2,1,3},
{5,4,2,1,3},
{3,4,5,1,2},
{3,5,4,1,2},
{4,3,5,1,2},
{5,3,4,1,2},
{4,5,3,1,2},
{5,4,3,1,2},
{2,3,4,5,1},
{2,3,5,4,1},
{2,4,3,5,1},
{2,5,3,4,1},
{2,4,5,3,1},
{2,5,4,3,1},
{3,2,4,5,1},
{3,2,5,4,1},
{4,2,3,5,1},
{5,2,3,4,1},
{4,2,5,3,1},
{5,2,4,3,1},
{3,4,2,5,1},
{3,5,2,4,1},
{4,3,2,5,1},
{5,3,2,4,1},
{4,5,2,3,1},
{5,4,2,3,1},
{3,4,5,2,1},
{3,5,4,2,1},
{4,3,5,2,1},
{5,3,4,2,1},
{4,5,3,2,1},
{5,4,3,2,1}};
bool comp(string a,string b){
	if(v[a[0]]<v[b[0]])
		return true;
	return false;
}
#ifdef DEBUG
void display(){
  for(int i=0;i<5;i++)
	  fout<<current[i]<<" ";
  fout<<endl;
}
#endif
int getResult(int i){
	for(int j=0;j<5;j++)
		if(P[i][j]==0)
			current[j]=hand[j];
		else
			current[j]=deck[P[i][j]-1];

    sort(current,current+5,comp);

    bool flush=true;
	bool straight=true;
	for(int j=0;j<4;j++){
		if(current[j][1]!=current[j+1][1])
			flush=false;
	}
	
	for(int j=1;j<4;j++){
       if(v[current[j][0]]+1!=v[current[j+1][0]])
		   straight=false;
	}
	if(straight)
		if(v[current[0][0]]==1){
			if(!(v[current[4][0]]==13||v[current[1][0]]==2))
				straight=false;
		}
		else if(v[current[0][0]]+1!=v[current[1][0]])
			straight=false;


     int counter[5];
	 current[5]="N ";
	 int n=0,count=0;
	 for(int j=1;j<6;j++)
		 if(v[current[j-1][0]]==v[current[j][0]])
			 count++;
		 else{
            counter[n]=count+1;
			count=0;
			n++;
		 }
	 sort(counter,counter+n);

	 int maximum=counter[n-1],secondMaximum=(n>=2)?counter[n-2]:0;
     
	 if(flush&&straight){
		 //display();
		 return 8;
	 }
     if(maximum==4)
		 return 7;
	 if(maximum==3&&secondMaximum==2)
		 return 6;
	 if(flush){
         //display();
		 return 5;
	 }
	 if(straight)
		 return 4;
	 if(maximum==3)
		 return 3;
	 if(maximum==2&&secondMaximum==2)
		 return 2;
	 if(maximum==2)
		 return 1;
	 return 0;
}
int main(){
	for(int i=2;i<=9;i++)
		v[(char)('0'+i)]=i;
	
	v['A']=1;
	v['T']=10;
	v['J']=11;
	v['Q']=12;
	v['K']=13;
    v['N']=-1;
	while(true){
		#ifdef DEBUG
		result=-1;
		for(int i=0;i<5;i++)
			fin>>hand[i];
		for(int i=0;i<5;i++)
			fin>>deck[i];
		fout<<"Hand: ";
		for(int i=0;i<5;i++)
			fout<<hand[i]<<" ";
		fout<<"Deck: ";
		for(int i=0;i<5;i++)
			fout<<deck[i]<<" ";
        for(int i=0;i<326;i++)
			result=max(result,getResult(i));
		fout<<"Best hand: "<<value[result]<<endl;
		if(fin.eof())
			break;
        #else
		result=-1;
		for(int i=0;i<5;i++){
			if(!(cin>>hand[i]))
				return 0;
		}
		for(int i=0;i<5;i++)
			cin>>deck[i];
		cout<<"Hand: ";
		for(int i=0;i<5;i++)
			cout<<hand[i]<<" ";
		cout<<"Deck: ";
		for(int i=0;i<5;i++)
			cout<<deck[i]<<" ";
        for(int i=0;i<326;i++)
			result=max(result,getResult(i));
		cout<<"Best hand: "<<value[result]<<endl;
		if(cin.eof())
			break;
        #endif
	}

	return 0;
}